PRACTICAL NO 8
AIM : K-Means Clustering
Apply the K-Means algorithm to group similar data points into clusters.
Determine the optimal number of clusters using elbow method or silhouette analysis.
Visualize the clustering results and analyze the cluster characteristics.

INPUT:
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler

# Generate synthetic dataset
data = {
    'Feature1': [1, 2, 3, 8, 9, 10, 15, 16, 17],
    'Feature2': [2, 3, 4, 7, 8, 9, 12, 13, 14]
}
df = pd.DataFrame(data)

# Standardize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(df)

# Determine the optimal number of clusters using the Elbow Method
inertia = []
k_values = range(1, 6)
for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

plt.plot(k_values, inertia, marker='o')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.title('Elbow Method for Optimal K')
plt.show()

# Apply K-Means with the chosen number of clusters (e.g., k=3)
kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)
kmeans.fit(X_scaled)
df['Cluster'] = kmeans.labels_

# Calculate Silhouette Score
sil_score = silhouette_score(X_scaled, kmeans.labels_)
print(f'Silhouette Score: {sil_score:.4f}')

# Visualize Clusters
plt.scatter(df['Feature1'], df['Feature2'], c=df['Cluster'], cmap='viridis', edgecolors='k')
plt.xlabel('Feature1')
plt.ylabel('Feature2')
plt.title('K-Means Clustering Results')
plt.show()

OUTPUT:




