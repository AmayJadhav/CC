PRACTICAL NO 6
AIM : Regression and Its Types 
Implement simple linear regression using a dataset. 
Explore and interpret the regression model coefficients and goodness-of-fit measures. 
Extend the analysis to multiple linear regression and assess the impact of additional predictors

INPUT:
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load dataset (Example: Synthetic Data)
data = {
    'X': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'Y': [2.3, 2.5, 3.1, 3.8, 4.2, 5.1, 5.8, 6.5, 7.1, 7.8]
}
df = pd.DataFrame(data)

# Split data into training and testing sets
X = df[['X']]
y = df['Y']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Simple Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Model Coefficients
print(f"Intercept: {model.intercept_}")
print(f"Coefficient: {model.coef_[0]}")

# Goodness-of-Fit Measures
print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred):.4f}")
print(f"R-squared: {r2_score(y_test, y_pred):.4f}")

# Plot Regression Line
plt.scatter(X, y, color='blue')
plt.plot(X, model.predict(X), color='red')
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Simple Linear Regression')
plt.show()

# Multiple Linear Regression Example
data['Z'] = [1, 3, 2, 5, 4, 6, 8, 7, 9, 10]
df = pd.DataFrame(data)
X = df[['X', 'Z']]
y = df['Y']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model_multi = LinearRegression()
model_multi.fit(X_train, y_train)
y_pred_multi = model_multi.predict(X_test)

# Model Coefficients for Multiple Linear Regression
print(f"Intercept: {model_multi.intercept_}")
print(f"Coefficients: {model_multi.coef_}")

# Goodness-of-Fit Measures
print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred_multi):.4f}")
print(f"R-squared: {r2_score(y_test, y_pred_multi):.4f}")

OUTPUT:


